"""
=============================
Creating position as function of energy output for adjustments of SIS tables for TRiP98
=============================
This script uses the BPs.txt file generated by the ddd.py script
This script is only a very simple example to inspire users for their own scripts according to their personal needs

# Group: Aarhus Particle Therapy Group
# Date: August 2015
"""

from pylab import *
import numpy as np
from scipy.interpolate import interp1d
import math
import time
import datetime

matplotlib.rcParams.update({'font.size': 18})

file = open('BPs.txt', "r")
Raw = file.readlines()
file.close() 

E = []
Pos = []
dat = Raw[4:len(Raw)]
for i in range(len(dat)): 
    E_value = dat[i].split()[0] 
    Pos_value = dat[i].split()[1]
    E.append(E_value)
    Pos.append(Pos_value)
E = [float(x) for x in E] # Store the data as floats
Pos = [float(x) for x in Pos] # Store the data as floats

# Combine lists into list of tuples
points = zip(E, Pos)
# Sort list of tuples by E-values (which are given in BPs.txt in random order)
points = sorted(points, key=lambda point: point[0])
# Split list of tuples into two list of E values (our y) and Pos values (our x)
E, Pos = zip(*points)

E = np.asarray(E).ravel() # make list to np.array for consistency
Pos = np.asarray(Pos).ravel() # make list to np.array for consistency

# we now have to define the list of positions that we are interested in for the SIS file 
# here follows an example of integer iso_spacing (1 mm steps), the most common example for many clinics - users are encouraged to change the code according to their personal needs
Pos = Pos*10 #convert to mm
min_Pos = math.ceil(Pos.min()) # we find the minimum integer value for interpolation (ceil keeps us within interpolation range)
max_Pos = math.floor(Pos.max()) # we find the maximum integer value for interpolation (floor keeps us within interpolation range)
new_length = max_Pos - min_Pos +1
#
#FOR THE SIS FILE OF MARBURG, THE 1 MM SPACED STEPS STARTS AT 14.7 MM, SO FOR THAT SIS TABLE UNCOMMENT THE TWO LINES BELOW:
#min_Pos = min_Pos+0.77
#max_Pos = max_Pos-0.23
#
new_Pos = np.linspace(min_Pos, max_Pos, new_length) #define the desired list of positions for SIS table 

#the spine function
f = interp1d(Pos, E, kind='cubic') #find the spline function
new_E = f(new_Pos) #find matching energies

## Write file with newfound values to be copy-pasted into SIS table
t=  datetime.datetime.now()
now = datetime.datetime.fromtimestamp(time.mktime(t.timetuple()))
header1 = '!fileversion    '+t.strftime("%Y%m%d")+"\n"
header2 = '!filedate    ' + now.ctime() + '\n'
filename = open('Adjustment_to_SIStable_v2.txt', "w")
filename.write(header1 + header2 + '!Bragg peak location' + "\n" + '# z[mm] energy[MeV]' + "\n")
for k in range(len(new_Pos)):
    filename.write(str(new_Pos[k]) + " " + str(new_E[k]) + "\n" )  
filename.close()  

#plot to check data as well as the spline function found above 
title('Energy as a function of Bragg peak positions',y=1.03)
xlabel('Bragg peak positions [g/cm**2]')
ylabel('Projectile energy [MeV]')
plot(Pos,E,'b')
plot(Pos,f(Pos),'g')
legend(['data', 'function'], loc='best')
#figtext(0.3, 0.5, 'Fitted FWHM = %f' % (FWHM), fontdict=None)
show()


